// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "scheme.md"
  theme = "neutral"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Chain {
  POLYGON
  ETHEREUM
}

enum Network {
  // Polygon
  POLYGON_MAINNET
  POLYGON_MUMBAI
  // Ethereum
  ETHEREUM_MAINNET
  ETHEREUM_GOERLI
}

enum IssuerStatus {
  ACTIVE
  INACTIVE
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Issuer {
  id                  String       @id @default(uuid())
  name                String       
  aliasName           String       @map("alias_name") 
  didConfigurationUrl String       @map("did_configuration_url") @db.Text // https://example.com/.well-known/did.json
  walletAddress       String       @map("wallet_address")
  network             Network      @default(POLYGON_MUMBAI)
  publicKey           String       @map("public_key")
  description         String?      @db.Text
  issuerProfileUrl    String?      @map("issuer_profile_url") @db.Text
  revocationListUrl   String?      @map("revocation_list_url") @db.Text
  status              IssuerStatus @default(ACTIVE)
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")

  @@index([walletAddress])
  @@map("issuers")
}

model CredentialTemplate {
  id                String       @id @default(uuid())
  name              String       // e.g. 2022年前期 XYZ講座履修完了証明書
  description       String?      @db.Text
  imageUrl          String?      @map("image_url") @db.Text
  credentials       Credential[]
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  @@map("credential_templates")
}

model Credential {
  id                String              @id @default(uuid())
  name              String              // e.g. 2022年前期 XYZ講座履修完了証明書
  visibility        Visibility          @default(PUBLIC)
  subjectId         String              @map("subject_id") // did:example:ebfeb1f712ebc6f1c276e12ec21
  vcId              String              @map("vc_id") // http://example.edu/credentials/3732
  imageUrl          String              @map("image_url") // ipfs://example.com/cid12345.png
  json              Json
  template          CredentialTemplate  @relation(fields: [templateId], references: [id])
  templateId        String              @map("template_id")
  mintedNft         MintedNft?
  issuedBy          String?             @map("issued_by")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@index([subjectId])
  @@index([vcId])
  @@index([templateId])
  @@map("credentials")
}

model Revocation {
  id                String       @id @default(uuid())
  reason            String
  credentialId      String?      @map("credential_id")
  vcId              String       @map("vc_id")
  revokedBy         String?      @map("revoked_by")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  @@index([credentialId])
  @@index([vcId])
  @@map("revocations")
}

model Nft {
  id              String       @id @default(uuid())
  network         Network      @default(POLYGON_MUMBAI)
  contractAddress String       @map("contract_address")
  name            String
  description     String?      @db.Text
  mintedNfts      MintedNft[]
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  @@unique([network, contractAddress])
  @@map("nfts")
}

model MintedNft {
  id                 String              @id @default(uuid())
  tokenId            String              @map("token_id")
  nft                Nft                 @relation(fields: [nftId], references: [id], map: "minted_nft_nft_id_fkey")
  nftId              String              @map("nft_id")
  ownerWalletAddress String              @map("owner_wallet_address")
  credential         Credential          @relation(fields: [credentialId], references: [id])
  credentialId       String              @map("credential_id") @unique
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  @@index([ownerWalletAddress])
  @@map("minted_nfts")
}

model User {
  id                   String       @id @default(uuid())
  walletAddress        String       @map("wallet_address")
  credentialVisibility Visibility   @default(PUBLIC) @map("credential_visibility")
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")

  @@index([walletAddress])
  @@map("users")
}
